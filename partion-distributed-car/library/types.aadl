package Types
public
  with Data_Model;
  with Base_types;

  ----------
  -- Data --
  ----------
  
  data Signed_Integer
  properties
    Data_Model::Data_Representation => Integer;  -- 16 bits??
    Data_Model::Number_Representation => Signed; 
  end Signed_Integer;
  
  data TM_frame_dat
  properties
    --Data_Model::Base_Type => classifier (types::Signed_Integer);
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (64); -- NB_MAX_ENTIERS_TM_CICAS
  end TM_frame_dat;
  
  data TC_frame_dat
  properties
    --Data_Model::Base_Type => classifier (types::Signed_Integer);
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (64); -- NB_MAX_ENTIERS_TC_CICAS
  end TC_frame_dat;

  data I2C_address
  properties
    Data_Model::Data_Representation => Integer; 
  end I2C_address;
  
  data TIMER_channel
  properties
    Data_Model::Data_Representation => Integer; 
  end TIMER_channel;
  
  data PWM_channel
  properties
    Data_Model::Data_Representation => Integer; 
  end PWM_channel;

  data US_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end US_meas_dat;
  
  data PRESSURE_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end PRESSURE_meas_dat;
  
  data COMPASS_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end COMPASS_meas_dat;
  
  data ODOMETER_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end ODOMETER_meas_dat;
  
  data RECEIVER_cmd_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end RECEIVER_cmd_dat;
  
  data ACTUATORS_cmd_dat
  properties
    --Data_Model::Base_Type => classifier (types::Signed_Integer);
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (4); --  
  end ACTUATORS_cmd_dat;

  data INERTIAL_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end INERTIAL_meas_dat;
  
  data INERTIAL_GPS_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end INERTIAL_GPS_meas_dat;
  
  data GPS_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end GPS_meas_dat;
  
  data TELEMETER_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end TELEMETER_meas_dat;
  
  data Decision_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end Decision_dat;
  
  data CAMERA_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end CAMERA_meas_dat;
  
  data CAMERA_IP_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end CAMERA_IP_meas_dat;

  data State_estimation_dat
  properties
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (64);  
  end State_estimation_dat;
  
  data MOTOR_IG52_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end MOTOR_IG52_meas_dat;
  
  data MOTOR_meas_dat
  properties
    Data_Model::Data_Representation => Integer; 
  end MOTOR_meas_dat;

  data Zigbee_Packet
  properties
    Data_Model::Data_Representation => Integer; 
  end Zigbee_Packet;
  
  --------------
  -- PWM_Rate --
  --------------

  data PWM_Rate extends Base_Types::Unsigned_8
  end PWM_Rate;

  --------------
  -- Six_Axis --
  --------------

  -- Raw 6-axis motion sensor information

  data Six_Axis
  properties
    Data_Model::Data_Representation => Struct;
  end Six_Axis;

  data implementation Six_Axis.impl
  subcomponents
    Acc_X  : data Base_Types::Integer_16;
    Acc_Y  : data Base_Types::Integer_16;
    Acc_Z  : data Base_Types::Integer_16;
    Gyro_X : data Base_Types::Integer_16;
    Gyro_Y : data Base_Types::Integer_16;
    Gyro_Z : data Base_Types::Integer_16;

  end Six_Axis.impl;

  --------------------
  -- Syslink_Packet --
  --------------------

  -- Syslink is the protocol used between the STM32 and NRF51 in
  -- Crazyflie 2.0. It handles low level communication on the serial
  -- port. See https://wiki.bitcraze.io/doc:crazyflie:syslink:index

  data Syslink_Packet
    --  For now, we model it as an opaque type
  end Syslink_Packet;
  
  data Distance
  properties
    Data_Model::Data_Representation => Integer;  -- 16 bits??
    Data_Model::Number_Representation => Signed; 
  end Distance;
 
 
  data Vx
    --  For now, we model it as an opaque type
  end Vx;
  
end types;
